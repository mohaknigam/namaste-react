Q.) Difference between onClick={() => handleAddClick(item)} and onClick={handleAddClick(item)} inside buttons onClick?
Ans.) Both patterns you provided can work depending on your use case, and neither is inherently incorrect. The choice between them depends on your specific needs and the behavior you want to achieve.

Let's review the two patterns:

1. **Inline Arrow Function:**
```jsx
onClick={() => handleAddClick(item)}
```

2. **Direct Function Reference:**
```jsx
onClick={handleAddClick(item)}
```

- **Inline Arrow Function:** This pattern is used when you need to pass specific data or arguments to the event handler (`handleAddClick` in this case). The inline arrow function allows you to include additional data (like the `item` variable) and call the `handleAddClick` function with that data when the button is clicked. This pattern is useful when you want to handle the click event with some context-specific information related to the clicked item.

- **Direct Function Reference:** This pattern is used when you don't need to pass any additional data or arguments to the event handler. Instead, you directly reference the `handleAddClick` function as the onClick handler. In this case, the `handleAddClick` function will be called without any arguments when the button is clicked. This pattern is simpler and has better performance since it avoids creating a new function instance on each render.

So, which one to choose depends on your requirements:

- If you need to pass specific data or arguments to the event handler (e.g., differentiating which item is being clicked), use the inline arrow function pattern.

- If you don't need to pass any additional data and just want to call the `handleAddClick` function as is when the button is clicked, use the direct function reference pattern.

Both patterns are valid, and you can select the one that best fits your use case and code organization. If you don't need to pass any additional data, using the direct function reference (`onClick={handleAddClick}`) is generally preferred for better performance.