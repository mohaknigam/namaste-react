● - what is a package?
Ans.)In the context of software development, a package refers to a collection of files and resources that are bundled together and distributed as a single unit. Packages are used to organize and distribute code, libraries, modules, or other components that can be easily reused in different projects.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------

● - What is `NPM`?
Ans.) NPM stands for Node Package Manager. It is a package manager for the JavaScript programming language, specifically for Node.js applications. NPM is bundled with Node.js, meaning that when you install Node.js, you also get NPM installed automatically.
NPM allows developers to easily manage and install third-party packages or libraries (also known as modules) into their Node.js projects. These packages can be open-source libraries created by other developers or custom packages published by organizations or individuals.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------

● - what is a bundler?
Ans.)A bundler is a tool or software that combines multiple files, modules, or assets into a single bundle or a set of optimized bundles. Bundlers are commonly used in web development to package and manage various resources, such as JavaScript files, CSS stylesheets, images, fonts, and more, into a format that can be efficiently loaded by web browsers.

Imagine you have a big project with lots of files, including JavaScript files, CSS stylesheets, images, and more. When you want to make your project available on the web, you need to organize and prepare these files so that they can be efficiently loaded by web browsers.

A bundler is like a tool that takes all these files, analyzes them, and puts them together into a single, optimized package. It's like packing all your project files into one neat box.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------


● - What is `Parcel/Webpack`? Why do we need it?
Ans.)Parcel and Webpack are both popular bundlers for JavaScript-based web applications. They help manage and bundle various assets, such as JavaScript files, CSS stylesheets, images, and more, into optimized bundles that can be efficiently loaded by web browsers. 

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------


● - What is `.parcel-cache`
Ans.) The .parcel-cache directory is a folder generated by the Parcel bundler during the bundling process. When you use Parcel to build your project, it caches certain files and dependencies to speed up subsequent builds.

Inside the .parcel-cache directory, Parcel stores precompiled or cached versions of your project's assets, including JavaScript files, CSS stylesheets, images, and other resources. This cache helps improve the build performance by avoiding unnecessary recompilation of unchanged assets.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is `npx` ?
Ans.)npx is a command-line tool that comes bundled with Node.js. It stands for "Node Package Runner" and is used to execute Node.js packages or binaries directly from the command line without the need for global installation.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------


● - what is a dependecy?
Ans.)In the context of Node.js projects, dependencies are external packages or libraries that your project requires to function correctly. These dependencies are typically listed in the package.json file and are installed using a package manager like npm (Node Package Manager) or Yarn.

When your project has dependencies, you can specify them in the dependencies section of the package.json file. Each dependency entry consists of a package name and its corresponding version or version range.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------

● - What is difference between `dependencies` vs `devDependencies`
Ans.)Dev dependencies, short for development dependencies, are packages that are only required during the development process of your project. They are not needed for the production runtime of your application. Dev dependencies are typically used for tasks such as testing, building, linting, or other development-related tasks.

Including dev dependencies allows you to separate the dependencies needed for development from those required for production. It helps keep your production environment lean by excluding unnecessary packages and reducing the size of your application's deployment bundle.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is Tree Shaking?
Ans.)Tree shaking is a technique used in modern JavaScript bundlers, like Webpack and Rollup, to eliminate unused code or dead code from the final bundle. The term "tree shaking" is derived from the concept of shaking a tree to remove the dead or unwanted branches.

When you build a JavaScript application, you often import modules or libraries that provide various functionalities. However, you might end up using only a subset of those functionalities in your actual code. Tree shaking identifies and eliminates the parts of the imported code that are not used, resulting in a smaller bundle size and improved performance.

The benefits of tree shaking include:

Smaller Bundle Size: By removing unused code, the resulting bundle size becomes smaller. This reduces the amount of data that needs to be transferred over the network, leading to faster loading times for your application.

Improved Performance: With a smaller bundle size, the JavaScript execution time is reduced. The browser can parse and execute the code more quickly, resulting in improved performance and responsiveness.

Code Maintainability: Tree shaking encourages developers to write modular code and import only the functionalities they need. This improves code maintainability and makes it easier to manage dependencies and track unused code.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is Hot Module Replacement?
Ans.)Hot Module Replacement (HMR) is a feature provided by certain JavaScript bundlers, such as Webpack, that allows developers to update modules in real-time without requiring a full page reload or losing the application's current state. It aims to enhance the development workflow by providing a faster and more seamless experience when making changes to code during development.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
Ans.)

Zero Configuration: Parcel aims to provide a zero-configuration experience, meaning you can start using it without having to create complex configuration files. It automatically analyzes your project's dependencies, detects file types, and applies appropriate transformations and optimizations.

Built-in Asset Transformation: Parcel supports a wide range of asset types out of the box, including JavaScript, CSS, HTML, images, fonts, and more. It handles the transformation and bundling of these assets without requiring additional configuration or plugins.

Fast Development Server: Parcel includes a development server that allows you to preview and test your project in a local development environment. The server provides features like hot module replacement (HMR) and automatic browser reloading, enabling faster development iterations and instant feedback on code changes.

Dependency Resolution: Parcel automatically resolves and manages dependencies for your project. It analyzes import statements and ensures that all required modules are included in the final bundle. It also handles complex dependency graphs, allowing you to import assets and modules from various sources effortlessly.

Production-Ready Bundles: Parcel generates optimized and production-ready bundles for your project. It applies minification, compression, and other optimizations to reduce the bundle size and improve loading performance. Parcel also provides options for code splitting and lazy-loading, allowing for efficient delivery of assets in a production environment.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is `.gitignore`? What should we add and not add into it?
Ans.)The .gitignore file is a text file used to specify intentionally untracked files or directories that should not be committed to a Git repository. It allows you to specify patterns or filenames that Git should ignore and not include in version control.

The purpose of the .gitignore file is to prevent certain files or directories from being inadvertently added to the repository, especially when they are generated or contain sensitive information that should not be shared. Including unnecessary files in version control can increase repository size, create clutter, and cause potential issues when collaborating or deploying projects.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is the difference between `package.json` and `package-lock.json`?
Ans.)package.json is a manually edited file that describes your project and lists the dependencies you need to run it.
 It's like a blueprint or a plan for your project. 

package-lock.json is an automatically generated file that keeps track of the specific versions of the packages you installed, so that everyone working on the project uses the same versions.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - Why should I not modify `package-lock.json`?
Ans.)Generated Automatically: package-lock.json is automatically generated by the package manager (such as npm or Yarn) based on the dependencies listed in your package.json file. It is intended to be a machine-generated file rather than one that you modify directly.

Deterministic Dependency Resolution: The purpose of package-lock.json is to provide deterministic dependency resolution. It ensures that the same versions of the dependencies are installed across different environments and by different developers. Modifying the lockfile manually can introduce inconsistencies and break the reproducibility of your project's dependencies.

Collaborative Development: When collaborating with other developers on a project, it's essential to have consistent dependency installations. By not modifying the package-lock.json, all developers will be working with the same set of dependencies, reducing the chances of compatibility issues or inconsistencies.

Accurate Dependency Tree: The package-lock.json file contains a detailed tree-like structure of your project's dependencies, including their transitive dependencies and the resolved versions. Manually modifying this file can lead to an inaccurate or inconsistent representation of the dependency tree.

Package Manager Overwrites Modifications: If you make manual modifications to the package-lock.json file and then run a package manager command (such as npm install or yarn install), the package manager will regenerate the lockfile based on the package.json file, discarding your modifications. This can lead to unexpected behavior and cause confusion.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is `node_modules` ? Is it a good idea to push that on git?
Ans.)node_modules is a directory that contains the dependencies (packages or libraries) installed for a Node.js project. When you use a package manager like npm or Yarn to install dependencies, they are typically downloaded and stored in the node_modules directory.No dont push it to git.

As for whether it's a good idea to push the node_modules directory to Git, the general recommendation is to not include it in version control. Here's why:

Size and Redundancy: The node_modules directory can be quite large, especially for projects with many dependencies. Committing it to Git would increase the size of your repository unnecessarily, making cloning and updating slower for collaborators.

Dependency Management: Package managers like npm and Yarn are designed to handle dependency management efficiently. By including node_modules in version control, you would be duplicating the functionality of the package manager and unnecessarily tracking all dependencies within the repository.

Reproducible Builds: Instead of committing node_modules, it is better to commit the package.json and package-lock.json (or yarn.lock) files. These files define the project's dependencies and their specific versions. When another developer clones the repository, they can simply run npm install or yarn install to install the exact same dependencies as specified in the lockfile, ensuring consistent builds across environments.

Collaboration: Excluding node_modules from version control allows collaborators to manage their own local dependencies independently. Each developer can choose their preferred package manager and have control over installing, updating, or removing dependencies based on their development needs.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is the `dist` folder?
Ans.)the dist folder is a directory that holds the optimized and compiled output of your web application or website. It contains the final version of your code that is ready for deployment to a production environment, and it typically undergoes optimizations to improve performance. The dist folder is not usually committed to version control and is generated during the build process from your source code.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● - What is `browserlists`
Ans.)The purpose of browserslist is to define the range of browsers or environments that your web application should be compatible with. By specifying the target browsers, you can ensure that the generated code or styles are compatible and work correctly across different browsers.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



Read about dif bundlers: vite, webpack, parcel
Ans.)

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● Read about: ^ - caret and ~ - tilda
Ans.)
Caret (^):

Version Range: The caret symbol is used in version ranges to indicate compatibility with a particular major version of a package. For example, ^1.2.3 means that any version greater than or equal to 1.2.3 and less than the next major version will be accepted. So, it would allow updates up to 1.x.x, but not beyond the next major version.
Semantic Versioning: The caret symbol aligns with the concept of Semantic Versioning (SemVer), which suggests that compatible updates can introduce new features and bug fixes but should not break existing functionality within the same major version.

Tilde (~):

Version Range: The tilde symbol is used in version ranges to indicate compatibility with a particular minor version of a package. For example, ~1.2.3 means that any version greater than or equal to 1.2.3 and less than the next minor version will be accepted. So, it would allow updates up to 1.2.x, but not beyond the next minor version.
Semantic Versioning: The tilde symbol also aligns with Semantic Versioning principles. It signifies that compatible updates can include bug fixes and patches but should not introduce new features or break existing functionality within the same minor version.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



● what is node module folder in react ?
Ans.) In React, the `node_modules` folder is a directory that contains the dependencies (packages or libraries) required by your React project. When you create a React project using a tool like Create React App or set up a project manually with npm or Yarn, the `node_modules` folder is automatically created and populated with the necessary packages.

Here's some additional information about the `node_modules` folder in React:

1. Dependency Management: React projects often require various third-party packages to provide additional functionality, such as state management, routing, styling, or data fetching. These packages are listed as dependencies in the `package.json` file, and when you run `npm install` or `yarn install`, the package manager fetches and installs these dependencies into the `node_modules` folder.

2. Package Structure: The `node_modules` folder contains subfolders for each installed package. These subfolders typically include the package's source code, configuration files, and any additional assets or documentation required by the package.

3. Version Control: It's generally recommended not to include the `node_modules` folder in version control systems like Git. The folder can become large and include numerous files, which can make the repository size unnecessarily large. Instead, it's more efficient to specify the project's dependencies in the `package.json` file and commit that file along with the `package-lock.json` or `yarn.lock` file (which ensures consistent dependency installations).

4. Dependency Updates: As you work on your React project, you may need to update or add new dependencies. You can use the package manager commands (`npm install` or `yarn add`) to install or update packages as needed. The package manager will automatically manage the `node_modules` folder and ensure the correct versions of the packages are installed.

Remember to regularly update your project's dependencies, as new versions may contain bug fixes, performance improvements, or new features.

In summary, the `node_modules` folder is a directory in a React project that holds the installed dependencies. It's automatically created and managed by the package manager. You don't need to interact directly with the `node_modules` folder; instead, you specify the project's dependencies in the `package.json` file, and the package manager takes care of fetching and managing the required packages in the `node_modules` folder bla bla bla.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------



